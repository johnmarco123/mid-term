
 -------------------- balls.js ------------------------ 

// empty the balls array, and remove each of those balls from the world
function destroyAllBalls() {
    while(balls.length > 0) {
        removeFromWorld(balls.pop());
    }
}

// resets the gamemode and initializes all balls off the snooker table
function setupBalls() {
    score = 0;
    // any portals from previous rounds get destroyed before we setup the balls
    destroyAllPortals(); 
    // any balls from previous rounds get destroyed before we setup new balls
    destroyAllBalls();
    // first we set up the 15 red balls
    let x = -500;
    let y = -500;
    for (let i = 0; i < 15; i++) {
        setupBall(x + (i * 30), y, BALLDIAMETER, color(255, 0, 0), "red", 1);
    }
    
    // then we set up the colored balls
    setupBall(-1000, y, BALLDIAMETER, color(0), "color", 7);// the black ball
    setupBall(-1030, y, BALLDIAMETER, color(255, 182, 193), "color", 6);// the pink ball
    setupBall(-1060, y, BALLDIAMETER, color(0, 0, 255), "color", 5); // the blue ball
    setupBall(-1090, y, BALLDIAMETER, color(42, 88, 72), "color", 3); // the green ball
    setupBall(-1020, y, BALLDIAMETER, color(200, 200, 0), "color", 2); // the yellow ball
    setupBall(-1050, y, BALLDIAMETER, color(160, 82, 45), "color", 4); // the brown ball

}

// places a ball in a random valid position
function placeBallRandomly(ballIdx) {
    let x, y;
    let validSpot = false;
    // ALGORITHM:
    // 1.) Try to place a ball at a random x, y coordinate
    // 2.) If there is a ball that is closer then the radius of both balls
    // added together (or the diameter of one ball since they have the same
    // radius) then try step one again
    // 3.) Otherwise, we place the ball there
    //
    //      VALID PLACEMENT AREA
    //
    // (50, 50)=============(850, 50)
    //    || o   |    o       o ||
    //    ||    -|              ||
    //    ||   / |              ||
    //    ||  |  |              ||
    //    ||   \ |              ||
    //    ||    -|              ||
    //    || o   |    o       o ||
    // (50, 400)=============(850, 400)
    //
    //
    while (!validSpot) {
        x = random(50, 850);
        y = random(50, 400);
        validSpot = balls.every(ball => dist(ball.position.x, ball.position.y, x, y) > BALLDIAMETER);
        if (validSpot) {
            Body.setPosition(balls[ballIdx], {x: x, y: y});
            break;
        }
    }
}


// we draw each ball in the ball array with their respective color 
function drawBalls() {
    for (const ball of balls) {
        fill(ball.color);
        drawVertices(ball.vertices);
    }
}

// initializes a ball with the given parameters,
// ensure that colorValue is an array of the following format:
// [0-255, 0-255, 0-255]
function setupBall(x, y, diameter, color, colorName, colorValue) {
    const options = {
        friction: 0.8,
        restitution: 0.8,
        label:colorName,
    }
    const radius = diameter / 2
    const ball = Bodies.circle(x, y , radius, options);
    ball.value = colorValue;
    ball.color = color;
    balls.push(ball);
    World.add(engine.world, [ball]);
    return ball;
}

// In snooker there are ways to foul which means we do not allow the user to
// score points. If a foul occurs, this function returns true and sets the
// variable messageBeingDisplayed to an error message to show the user
function checkIfBallCausesFoul(ball) {
    if (lastPocketedBall === null) {
        // if the first pocketed ball is not red
        if (ball.label != "red") {
            messageBeingDisplayed = "Your first pocketed ball must be a red ball!";
            displayMessage();
            return true;
        }
        // if the user pockets two red balls in a row
    } else if (lastPocketedBall.label == "red") {
        if (ball.label == "red") {
            messageBeingDisplayed = 'You must pocket a colored ball after you pocket a red ball!';
            displayMessage();
            return true;
        }
        // if the user pockets two colored balls in a row
    } else if (lastPocketedBall.label == "color") {
        if (ball.label != "red") {
            messageBeingDisplayed = 'You must pocket a red ball after you pocket a colored ball!';
            displayMessage();
            return true;
        }
    }
    // if no fouls occur, we return false to indicate that the shot was legal
    return false;
}

 -------------------- cueBall.js ------------------------ 

// initialization of the cue ball
function setupCueBall(x, y, diameter) {
    const options = { frictionAir: 0.01, restitution: 0.8, friction: 0.5, label: 'cue'};
    cueBall = Bodies.circle(x, y, diameter/2, options);
    World.add(engine.world, [cueBall]);
}

// we draw the cue ball
function drawCueBall() {
    fill(255);
    drawVertices(cueBall.vertices);
    resetCueBallIfOutOfBounds();
}

// if the cue ball ever flies out of bounds somehow, it will be considered the
// same as if it was pocketed, and we will allow the user to place it in the d
// zone
function resetCueBallIfOutOfBounds() {
    if (cueBall.position.x < 0 || cueBall.position.x > table.width ||
        cueBall.position.y < 0 || cueBall.position.y > height) {
        cueBallBeingPlacedInDZone = true;
    } 
}

// when the cue ball is being placed in the d zone, this function gets
// repeatedly called in the main draw loop
function setCueBallInDZone() {
    // we ensure all balls aren't moveable when placing the cue ball down
    for (const ball of balls) { 
        if (!ball.isStatic) {
            Body.setStatic(ball, true);
        }
    }

    // if the ball has been placed
    if (mouseIsPressed && mouseButton === LEFT && cueBallBeingPlacedInDZone) {
        // since we've placed the cue ball the balls are now moveable
        for (const ball of balls) { 
            if (ball.isStatic) {
                Body.setStatic(ball, false);
            }
        }
        Body.setVelocity(cueBall, {x: 0, y: 0}); // we set its velocity to zero
         // and we are no longer placing the ball in the dzone
        cueBallBeingPlacedInDZone = false; 
    }
    // we place the ball at the current mouseX and mouseY x, y coords
    Body.setPosition(cueBall, {x: mouseX, y: mouseY});

    const dx = cueBall.position.x - dZone.x
    const dy = cueBall.position.y - dZone.y
    const distance = dist(cueBall.position.x, cueBall.position.y, dZone.x, dZone.y);
    const maxDist = dZone.diameter/2 
    push();
    fill(255)
    textSize(30)
    text('Left click in the D zone to place the cue ball', dZone.x, dZone.y);
    pop();
    // if the cue ball location would be outside of the dzone, we do not want
    // to allow this. We want the cue ball to only be placeable inside of the 
    // d zone, so we only allow it to move within that area
    if (distance > maxDist || cueBall.position.x > dZone.x) {

        // the angle between the d zone center and the cue ball
        const angle = atan2(dy, dx); 
        // the new x and y location (after being clipped if it goes past the
        // dzone circle)
        let newX = dZone.x + cos(angle) * maxDist;

        const newY = dZone.y + sin(angle) * maxDist;
        // if the new x position crosses the d zone line we clip it back to the
        // left side of the line
        newX = Math.min(newX, dZone.x); 
        // we then set the cueBalls position to the clipped coordinates
        Body.setPosition(cueBall, {x: newX, y: newY});
    }

}


// this function is responsible for applying the force to the cue ball from the
// cue
function shootCueBall() {
    // only if the cue ball is not moving do we allow force to be applied
    if (!cueBall.isMoving) {
        const cuePos = {x: cue.x, y: cue.y}
        // the angle the cue ball should travel after being hit by the cue
        const targetAngle = Matter.Vector.angle(cueBall.position, cuePos);
        // we map the force to an appropriate amount, be very careful editing 
        // this code because these numbers are very sensetive
        const force = map(cue.charge, 0, cue.maxCharge, 0.001, 0.05);
        Body.applyForce(cueBall, cueBall.position, {
            x: cos(targetAngle) * -force,
            y: sin(targetAngle) * -force
        });
        cue.charge = 0;
        // we reset the charge rate, so it is not negative, which can result
        // in shooting the ball backwards
        cue.chargeRate = Math.abs(cue.chargeRate);
    } 
}

 -------------------- cue.js ------------------------ 

// we initialize the cue
function setupCue() {
    cue = createVector(0, 0); // the cue's position
    cue.maxCharge = 40; // how strong of a shot we allow at max charge
    cue.chargeRate = 1; // how fast the cue charges
    cue.charge = 0; // the cue's current charge
}

// we draw the cue, and all cue animations.
function drawCue() {
    // how far away from the ball does the cue orbit
    let orbitRadius = BALLDIAMETER / 2; 

    cue.x = cueBall.position.x + orbitRadius * cos(angle)
    cue.y = cueBall.position.y + orbitRadius * sin(angle)

    // if the cue ball is not moving, then we can draw the cue
    if (!cueBall.isMoving) {
        let charge = cue.charge * 2;
        push();
        translate(cue.x, cue.y);
        rotate(angle + PI / 2); // rotate the cue so it faces the cue ball
        fill(139,69,19);
        noStroke();
        rectMode(CENTER);
        push();
        // the blue tip of the cue
        fill(0, 0, 255)
        ellipse(0, -8 - charge, 6);

        // the black end of the cue
        fill(0)
        ellipse(0, -310 - charge, 12);

        pop();
        // the pool cue shaft
        quad(-6, -310 - charge, 6, -310 - charge, 3, -10 - charge, -3, -10 - charge);
        push();
            //  the white part at the front of the cue
            fill(255);
            quad(-3, -20 - charge, 3, -20 - charge, 3, -10 - charge, -3, -10 - charge);

            // the lines indicating where the ball will go when shot
            fill(255, 255, 255, 100);
            for (let i = 0; i < 35; i++) {
                rect(0, 50 + (i * 30), 3, 15);
            }
        pop();
        pop();
        // if the space bar is being pressed, we play the cue charging animation
        if (spaceBarIsDown) {
            chargeCue();
        }
    }
    handleMovementOfCue();
}


// this function is what allows the cue to be moved with the arrow keys
function handleMovementOfCue() {
    // if the cue Ball is moving slow enough, we make it stop entely
    // by settings its velocity to zero
    if (cueBall.speed < 0.08) { 
        Body.setVelocity(cueBall, {x: 0, y: 0});
        // any colored balls that were pocketed get placed in their designated
        // starting position when the cue ball stops moving
        for (const ball of pocketedColorBalls) {
            Body.setPosition(ball, ball.startPosition);
        }
        cueBall.isMoving = false;
    }

    if (keyIsDown(LEFT_ARROW)) {
        angle+=0.02;
    }

    if (keyIsDown(RIGHT_ARROW)) {
        angle-=0.02;
    }
}

// we charge the alternating between maxCharge and 0
function chargeCue() {
    cue.charge += cue.chargeRate;
    if (cue.charge > cue.maxCharge || cue.charge <= 0) {
        cue.chargeRate *= -1;
    }
}

 -------------------- gamemodes.js ------------------------ 

// gamemode 1 = regular snooker
function ballPosition1() {
    // destroy and respawn all bodies required for setting ball position
    setupBalls(); 
    // since we repositioned the balls, we are now placing the cue ball in the
    // d zone
    cueBallBeingPlacedInDZone = true; 
    // here we manually position each ball in the correct snooker position
    // THE FIFTEEN RED BALLS
    Body.setPosition(balls[0], {x: 600, y: 220});

    Body.setPosition(balls[1], {x: 623, y: 207});
    Body.setPosition(balls[2], {x: 623, y: 233});

    Body.setPosition(balls[3], {x: 646, y: 220});
    Body.setPosition(balls[4], {x: 646, y: 195});
    Body.setPosition(balls[5], {x: 646, y: 245});

    Body.setPosition(balls[6], {x: 669, y: 208});
    Body.setPosition(balls[7], {x: 669, y: 183});
    Body.setPosition(balls[8], {x: 669, y: 233});
    Body.setPosition(balls[9], {x: 669, y: 260});

    Body.setPosition(balls[10], {x: 692, y: 172});
    Body.setPosition(balls[11], {x: 692, y: 197});
    Body.setPosition(balls[12], {x: 692, y: 222});
    Body.setPosition(balls[13], {x: 692, y: 247});
    Body.setPosition(balls[14], {x: 692, y: 273});

    // THE COLOR BALLS. We also set their start position, so when they are
    // pocketed we can return them to their corresponding position
    const black = {x: 800, y: 220}
    Body.setPosition(balls[15], black);
    balls[15].startPosition = black;

    const pink = {x: 570, y: 220}
    Body.setPosition(balls[16], pink);
    balls[16].startPosition = pink;

    const blue = {x: 450, y: 220}
    Body.setPosition(balls[17], blue);
    balls[17].startPosition = blue;

    const green = {x: 200, y: 145}
    Body.setPosition(balls[18], green);
    balls[18].startPosition = green;

    const yellow = {x: 200, y: 295}
    Body.setPosition(balls[19], yellow);
    balls[19].startPosition = yellow;

    const brown = {x: 200, y: 220}
    Body.setPosition(balls[20], brown);
    balls[20].startPosition = brown;
}

// gamemode 2 = random red ball positions
function ballPosition2() {
    ballPosition1(); // first we move all the balls to their correct spot
    // then we randomize red ball location
    for (let i = 0; i < 15; i++) {
        // first we move all red balls off the pool table
        Body.setPosition(balls[i], {x: i * 100, y: -1000});
    }
    // then we place each ball in random valid locations on the board
    for (let i = 0; i < 15; i++) {
        placeBallRandomly(i)
    }
}

// gamemode 3 = random red ball and color ball positioning.
function ballPosition3() {
    // we randomize the red ball positioning
    ballPosition2();
    // we then randomize the other balls positioning
    for (let i = 15; i < balls.length; i++) {
        placeBallRandomly(i);
    }
}

// gamemode 4 = regular snooker with portal that teleport any ball that touches
// them!
function ballPosition4() {
    ballPosition1();
    setupPortals();
}

 -------------------- portals.js ------------------------ 

// for the custom gamemode 4, this helps us link two portals to one another
function linkPortals(portal1, portal2, color) {
    // we set their linkedTo property to one another. We also ensure
    // that their color property matches so the user knows which portals are
    // linked together
    portal1.linkedTo = portal2;
    portal2.linkedTo = portal1;
    portal1.color = color;
    portal2.color = color;
}

// removes all portals from the portal array, and destroys them from the world
function destroyAllPortals() {
    while (portals.length > 0) {
        removeFromWorld(portals.pop());
    }
}

// initializes all the portals
function setupPortals() {
    // CHANGE WITH CAUTION. CHANGING ANY OF THE OPTIONS WILL BREAK THE
    // FUNCTIONALITY OF THE PORTAL
    const options = { isStatic: true, isSensor: true, label: 'portal' };
    const portalLength = 100;
    const portalWidth = 10;
    const [tx, ty] = [table.location.x, table.location.y]

    // each portal has an outLocation. This is the location that a ball will
    // be teleported to, when it teleports to this portal.
    const d = BALLDIAMETER;
    const [p1x, p1y] = [tx+30, ty+220] // coordinates for portal 1
    const portal1 = Bodies.rectangle(p1x, p1y, portalWidth, portalLength, options);
    portal1.outLocation = {x: p1x+d, y: p1y}

    const [p2x, p2y] = [tx + 870, ty+220]; // coordinates for portal 2 
    const portal2 = Bodies.rectangle(tx + 870, ty+220, portalWidth, portalLength, options);
    portal2.outLocation = {x: p2x-d, y: p2y}
    linkPortals(portal1, portal2, [255, 0, 0]);

    const [p3x, p3y] = [tx + 240, ty + 30]; // coordinates for portal 3
    const portal3 = Bodies.rectangle(p3x, p3y, portalLength, portalWidth, options);
    portal3.outLocation = {x: p3x, y: p3y+d}

    const [p4x, p4y] = [tx + 240, ty+420]; // coordinates for portal 4
    const portal4 = Bodies.rectangle(p4x, p4y, portalLength, portalWidth,  options);
    portal4.outLocation = {x: p4x, y: p4y-d}
    linkPortals(portal3, portal4, [0, 255, 0]);

    const [p5x, p5y] = [tx + 670, ty+30]; // coordinates for portal 5
    const portal5 = Bodies.rectangle(p5x, p5y, portalLength, portalWidth, options);
    portal5.outLocation = {x: p5x, y: p5y+d}

    const [p6x, p6y] = [tx + 670, ty+420]; // coordinates for portal 6
    const portal6 = Bodies.rectangle(p6x, p6y, portalLength, portalWidth, options);
    portal6.outLocation = {x: p6x, y: p6y-d}
    linkPortals(portal5, portal6, [0, 0, 255]);

    portals.push(portal1, portal2, portal3, portal4, portal5, portal6);
    World.add(engine.world, [...portals]);
}

// flickers the colors of each portal for some added effect
function flickerPortalColors() {
    portalColors += portalColorChangeSpeed;
    if (portalColors >= 255 || portalColors <= 100) {
        portalColorChangeSpeed *= -1;
    }
}

// we draw all the portals here
function drawPortals() {
    // as long as there is portals, we flicker their colors so it looks cooler
    if (portals.length > 0) {
        flickerPortalColors();
    }
    // for each portal, we color it with its unique color
    push();
    for (const portal of portals) {
        noStroke();
        fill(...portal.color, portalColors);
        drawVertices(portal.vertices);
    }
    pop();
}

 -------------------- sketch.js ------------------------ 

let {
    Composite,
    Engine,
    Render,
    World,
    Bodies,
    Body,
    Constraint,
    Mouse,
    MouseConstraint,
    Events
} = Matter;

let canvas;
let engine = Engine.create();  // create an engine
// We set our table object, which is responsible for the table pockets,
// and the table cushions
let table = {
    x: 0,
    y: 0,
    width: 900,
    height: 450,
    pockets: [],
    cushions: [],
};
// as stated in the assignment, "ball diameter = table width / 36"
const BALLDIAMETER = table.width / 36;
let score = 0; // the score for each snooker game that gets shown to the user

let balls = []; // the snooker balls get stored here

// any balls that have been pocketed whilst the cue ball is still in movement
// get temporarily stored here. Once the cue ball stops moving, we place the
// pocketed Color balls back in their specific starting position
let pocketedColorBalls = []; 

// the last pocketed ball get stored here, this is used to detect when the
// user commits a foul by pocketing two red balls in a row, or two color balls
// in a row, or pocketing a color ball as their first ball.
let lastPocketedBall = null;

// here we store the portal bodies used for game mode 4
let portals = [];
// the time that it takes for the portals to flicker their color
let portalColorChangeSpeed = 2;
// this number must be between 100 and 255, this is the initial opacity of
// all portals
let portalColors = 100;

// the cue body, cue Ball body and dZone location
let cue, cueBall, dZone;
// the bool that controls whether or not the cue Ball is currently being placed
// in the d zone
let cueBallBeingPlacedInDZone = true;
// the angle used to determine how to rotate the cue around the cue ball
let angle = 0;
// when set to true, all non Cue balls are static (unable to be moved)
let allBallsAreStatic = false;

// whether or not the user has the space bar currently down
let spaceBarIsDown = false

// the message currently being displayed to the user (undefined if none)
let messageBeingDisplayed = undefined;
function setup() {
    canvas = createCanvas(900, 600);

    engine.world.gravity.y = 0; // shut off gravity

    // here we setup all bodies needed
    setupTable();
    setupCueBall(170, 220, BALLDIAMETER);
    setupBalls();
    setupCue();
    setupDZone();
}
////////////////////////////////////////////////////////////
function draw() {
    background(0);
    Engine.update(engine);

    // We draw each body here in the draw loop
    drawTable();
    drawCueBall();
    drawBalls();
    drawPortals();
    drawScore();
    drawGameInformation();
    // if the cue ball is not being placed in the Dzone, we allow the cue to
    // be drawn, this also allows shooting of the cue ball.
    if (!cueBallBeingPlacedInDZone) {
        drawCue();
    } else {
        // otherwise, we force the user to place the cue ball 
        setCueBallInDZone();
    }

    // only when we give a value to messageBeingDisplayed do we actually show
    // the user a message
    if (messageBeingDisplayed !== undefined) {
        displayMessage();
    }
}

function keyPressed() {
    switch(keyCode) {
        case 49: // number 1
            ballPosition1(); 
            break;
        case 50: // number 2
            ballPosition2();
            break;
        case 51: // number 3
            ballPosition3();
            break;
        case 52: // number 4
            ballPosition4();
            break;
    }
    // if the user clicks space bar and the cue Ball is not moving, we register
    // that the space bar is being pressed
    // HANDLE THIS CODE WITH CAUTION! IF WE ALLOW SPACEBAR TO BE PRESSED WHEN
    // THE BALL IS MOVING THE USER CAN HIT THE BALL MULTIPLE TIMES BEFORE THE
    // BALL STOPS MOVING!
    if (keyCode == 32 && !cueBall.isMoving) {
        spaceBarIsDown = true;
    }
}

function keyReleased() {
    if (keyCode == 32) { // when spacebar is released we shoot the cue ball
        shootCueBall();
        spaceBarIsDown = false;
        // now that we shot the cue ball, the cue ball is now in motion
        cueBall.isMoving = true; 
    }
}

// removes the body passed to the function from the world
function removeFromWorld(body) {
    World.remove(engine.world, body);
}

// draws the vertices of a body, typically used like so:
// drawVertices(mario.vertices)
// if mario was a body, this would draw marios vertices.
function drawVertices(vertices) {
    beginShape();
    for (var i = 0; i < vertices.length; i++) {
        vertex(vertices[i].x, vertices[i].y);
    }
    endShape(CLOSE);
}

// This code responsible for all collisions in the game
Events.on(engine, 'collisionStart', function(event) {
    // when a collision occurs we recieve the collider with event.pairs
    let pairs = event.pairs;

    pairs.forEach(function(pair) {
        let {bodyA, bodyB} = pair; // the BODY of each collider
        // the label we assigned to each body
        let a = bodyA.label 
        let b = bodyB.label

        // log any time the cue ball hits anything
        if (a == "cue" || b == "cue") {
            console.log("cue-" + (a == "cue" ? b : a));
            // if we pocket the cue ball, we allow the user to choose
            // its position in the d zone
            if (collided(a, b, "cue", "pocket")) {
                // as long as we are moving the cue ball,
                // no other ball should be moveable
                cueBallBeingPlacedInDZone = true;
            }

            // a collision occured between a red ball and the pocket,
        } else if (collided(a, b, "red", "pocket")) {
            for (let i = 0; i < balls.length; i++) {
                if (balls[i] == bodyA || balls[i] == bodyB) {
                    const ballCausedFoul = checkIfBallCausesFoul(balls[i]);
                    if (ballCausedFoul) {
                        // we don't count a point if a foul was caused
                    } else {
                        // if the user pocketed the red ball without a foul, we
                        // give them a point
                        score += balls[i].value;
                    }
                    // we save the last pocketed ball, so we can check for
                    // fouls later on
                    lastPocketedBall = balls[i];
                    balls.splice(i, 1); // remove the ball from the balls array
                    break;
                }
            }
            // a collision occured between a colored ball and the pocket
        } else if (collided(a, b, "color", "pocket")) {
            for (const ball of balls) {
                const body = (bodyA == ball) ? bodyA : bodyB == ball ? bodyB : null;
                if (body !== null) {
                    const ballCausedFoul = checkIfBallCausesFoul(body);
                    if (ballCausedFoul) {
                        // we don't count a point if the shot caused a foul
                    } else {
                        // if the shot did not cause a foul, we add points to
                        // the score based on the colored balls value
                        score += body.value;
                    }
                    lastPocketedBall = body;
                    pocketedColorBalls.push(body);
                    // we stop the velocity of the pocketed color ball and
                    // remove it from the board until the cue ball has stopped
                    // moving.
                    Body.setPosition(body, {x: -1000, y: -1000});
                    Body.setVelocity(body, {x: 0, y: 0});
                }
            }

            // if any ball hits a portal it gets teleported to the "outLocation"
            // of its "linkedTo" portal
        }

        if (a == "portal" || b == "portal") {
            const nonPortal = (a == "portal") ? bodyB : bodyA;
            const portal = (a == "portal") ? bodyA : bodyB;
            Body.setPosition(nonPortal, portal.linkedTo.outLocation);
        }
    });
});

// we check if bodyA = optionA, or optionB, and that bodyB equals the one that
// bodyA is not
function collided(bodyA, bodyB, optionA, optionB) {
    return (bodyA == optionA && bodyB == optionB) || 
           (bodyA == optionB && bodyB == optionA);
}


 -------------------- table.js ------------------------ 

// initializes each pocket, with the parameters provided
function setupPocket(x, y, diameter) {
    const options = {
        friction: 1,
        restitution: 0,
        isStatic: true,
        isSensor: true,
        label: 'pocket'
    }
    const radius = diameter / 2
    const pocket = Bodies.circle(x, y , radius, options);
    table.pockets.push(pocket);
    World.add(engine.world, [pocket]);
    return pocket
}

// initializes each cushion, with the parameters provided
function setupCushion(x, y, w, h, slope) {
    const options = {friction: 0.1, restitution: 1, isStatic: true, label: "cushion"}
    const cushion = Bodies.trapezoid(x, y, w, h, slope, options);
    table.cushions.push(cushion);
    World.add(engine.world, [cushion]);
    return cushion;
}

// sets up everything needed for the table, including all pockets and cushions
// as well as the table itself
function setupTable() {
    // initializing the table
    table.location = createVector(0, 0);
    table.width = 900;
    table.height = table.width / 2;

    // add the table to the world
    const options = {friction: 0, restitution: 0, isStatic: true, isSensor: true}
    table.table = Bodies.rectangle(table.location.x+450, table.location.y+220, table.width, table.height, options);
    World.add(engine.world, [table.table]);

    // here we initialize the pockets, and add them to the pockets array within
    // setupPocket.
    const offset = 20; // how far each hole is from the wall of the canvas
    const [tx, ty, tw, th] = [table.location.x, table.location.y, table.width, table.height];
    const HOLESIZE = BALLDIAMETER * 1.5; // UNCHANGEABLE VALUE!
    setupPocket(tx + offset, ty + offset, HOLESIZE);
    setupPocket(tx + tw/2, ty + offset, HOLESIZE);
    setupPocket(tx - offset + tw, ty + offset, HOLESIZE);
    setupPocket(tx + offset, ty - offset + th, HOLESIZE);
    setupPocket(tx + tw/2, ty - offset + th, HOLESIZE);
    setupPocket(tx - offset + tw, ty - offset + th, HOLESIZE);

    // adding the cushions to the tables cussions
    setupCushion(tx+235, ty + 20, 370, 20, -0.07);
    setupCushion(tx+665, ty + 20, 370, 20, -0.07);
    setupCushion(tx+235, ty - 20 + th, 390, 20, 0.07);
    setupCushion(tx+665, ty - 20 + th, 390, 20, 0.07);

    const leftCushion = setupCushion(tx+20, ty + 225, 370, 20, 0.07);
    Matter.Body.rotate(leftCushion, Math.PI / 2);

    const rightCushion = setupCushion(tx+880, ty + 225, 370, 20, 0.07);
    Matter.Body.rotate(rightCushion, -Math.PI / 2);

}

// we draw the table, including the pockets and the cushions
function drawTable(){
    push();
    noStroke();
    // the green of the pool table
    fill(50, 110, 50);
    const [tx, ty, tw, th] = [table.location.x, table.location.y, table.width, table.height];
    rect(tx, ty, tw, th, 20);
    drawVertices(table.table.vertices);

    // wooden frame of the table
    fill(110, 40, 10);
    rect(0, 0, table.width, 10);
    rect(0, 0, 10, table.height);
    rect(0, table.height-10, table.width, 10);
    rect(table.width - 10, 0, 10, table.height);

    // the yellow backs for each pocket
    fill(180, 180, 0);
    rect(0, 0, 30, 30, 5);
    rect(table.width / 2 - 20, 0, 40, 20, 5);
    rect(table.width - 30, 0, 30, 30, 5);
    rect(0, table.height - 30, 30, 30, 5);
    rect(table.width / 2 - 20, table.height - 20, 40, 20, 5);
    rect(table.width - 30, table.height - 30, 30, 30, 5);

    // the pool pockets
    fill(0);
    table.pockets.forEach(pocket => drawVertices(pocket.vertices));

    // the pool cushions
    fill(0, 0, 0, 100);
    table.cushions.forEach(cushion => drawVertices(cushion.vertices));

    pop();
    // we also draw the d zone here on top of everything else so it can be seen
    drawDZone();
}

// initializing the d zone location, and diameter
function setupDZone() {
    dZone = createVector(200, 220);
    dZone.diameter = 150;
}

// drawing of the d zon
function drawDZone() {
    push();
    stroke(255);
    line(200, 32, 200, table.height - 32);
    noFill();
    ellipse(dZone.x, dZone.y, dZone.diameter);

    noStroke();
    fill(50, 110, 50);
    rect(201, 140, 76, 160);
    pop();
}

 -------------------- text.js ------------------------ 

// when messageBeingDisplayed has a value, this function gets called and
// displays that message to the user
function displayMessage() {
    // the message gets shown for this timeouts duration, when the timeout
    // gets resolved, the message will no longer be shown (as it gets set
    // to undefined)
    setTimeout(() => messageBeingDisplayed = undefined, 3000);
    push();
    fill(255);
    textSize(25);
    text(messageBeingDisplayed, dZone.x, dZone.y);
    pop();
}

// draws the players score
function drawScore() {
    push();
    fill(255, 0, 0);
    textSize(25);
    text(`Score: ${score}`, 20, height - 15);
    pop();
}

// all the game info at the bottom of the screen gets shown from here
function drawGameInformation() {
    push();
    fill(255)
    textSize(20)
    text("Game modes:", 150, height - 125);
    text("1 = normal snooker", 20, height - 100);
    text("2 = randomized red ball positions", 20, height - 80);
    text("3 = all ball positions randomized except cue ball", 20, height - 60);
    text("4 = normal snooker with portals that teleport balls", 20, height - 40);
    text("Controls:", 640, height - 125);
    text("Use the left and right arrow keys to aim.", 500, height - 100);
    text("Hold the space bar to charge the cue,", 500, height - 80);
    text("release the space bar to hit the cue ball", 500, height - 60);
    pop();
}
